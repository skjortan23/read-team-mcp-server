#!/usr/bin/env python3
"""
Test Vulnerability Scanner Tool

This tests the vulnerability enumeration functionality against a specific target.
"""

import json
import sys
import asyncio
from pathlib import Path

# Add the src directory to the path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

def test_vulnerability_scanner_streaming():
    """Test the vulnerability scanner with streaming output."""

    print("🚀 Testing Vulnerability Scanner (Streaming)")
    print("=" * 45)
    print()

    # Test target
    target_host = "10.0.0.224"
    target_port = 80

    print(f"🎯 Target: {target_host}:{target_port}")
    print()

    # Test 1: Import the vulnerability scanner module
    print("1. Testing vulnerability scanner module import...")
    try:
        from red_team_mcp.nuclei_scanner import enumerate_vulnerabilities_streaming
        print("   ✅ Vulnerability scanner module imported successfully")
    except ImportError as e:
        print(f"   ❌ Failed to import vulnerability scanner: {e}")
        return False

    # Progress callback to show streaming output
    def progress_callback(progress_data):
        progress_type = progress_data.get("type")
        message = progress_data.get("message", "")

        if progress_type == "connectivity_success":
            print(f"   ✅ {message}")
        elif progress_type == "connectivity_failed":
            error = progress_data.get("error", "Unknown error")
            print(f"   ❌ {message}: {error}")
        elif progress_type == "dns_failed":
            error = progress_data.get("error", "Unknown error")
            print(f"   ❌ {message}: {error}")
        elif progress_type == "connectivity_error":
            error = progress_data.get("error", "Unknown error")
            print(f"   ❌ {message}: {error}")
        elif progress_type == "scan_started":
            print(f"   🚀 {message}")
        elif progress_type == "output_line":
            line = progress_data.get("line", "")
            if line.strip():  # Only show non-empty lines
                print(f"   📡 {line}")
        elif progress_type == "vulnerability_found":
            vuln = progress_data.get("vulnerability", {})
            total = progress_data.get("total_found", 0)
            template_id = vuln.get("template_id", "unknown")
            severity = vuln.get("severity", "unknown")
            print(f"   🚨 VULNERABILITY #{total}: {template_id} [{severity}]")
        elif progress_type == "scan_complete":
            vuln_count = progress_data.get("vulnerabilities_found", 0)
            duration = progress_data.get("duration_seconds", 0)
            print(f"   ✅ {message} (Duration: {duration:.2f}s)")
        elif progress_type == "scan_failed":
            error = progress_data.get("error", "Unknown error")
            print(f"   ❌ {message}: {error}")

    # Test 2: Check if nuclei is available
    print("\n2. Checking nuclei availability...")
    try:
        import subprocess
        result = subprocess.run(["nuclei", "-version"],
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            version_info = result.stdout.strip()
            print(f"   ✅ Nuclei is available: {version_info}")
        else:
            print(f"   ❌ Nuclei command failed: {result.stderr}")
            print("   💡 Make sure nuclei is installed and in PATH")
            return False
    except subprocess.TimeoutExpired:
        print("   ❌ Nuclei command timed out")
        return False
    except FileNotFoundError:
        print("   ❌ Nuclei not found in PATH")
        print("   💡 Install nuclei: https://github.com/projectdiscovery/nuclei")
        return False
    except Exception as e:
        print(f"   ❌ Error checking nuclei: {e}")
        return False

    # Test 3: Test streaming vulnerability enumeration
    print(f"\n3. Testing streaming vulnerability enumeration on {target_host}:{target_port}...")
    try:
        print(f"   🔍 Starting streaming vulnerability scan...")
        print(f"   📡 Target: {target_host}:{target_port}")
        print(f"   🔌 Will first test port connectivity...")
        print(f"   ⏱️  This will show real-time output...")
        print()

        result = enumerate_vulnerabilities_streaming(target_host, target_port, progress_callback)

        if result.get("success"):
            scan_id = result.get("scan_id")
            vuln_count = result.get("vulnerabilities_found", 0)
            duration = result.get("duration_seconds", 0)

            print(f"\n   ✅ Streaming vulnerability scan completed successfully!")
            print(f"   📊 Scan ID: {scan_id}")
            print(f"   🔍 Vulnerabilities found: {vuln_count}")
            print(f"   ⏱️  Duration: {duration:.2f} seconds")

            # Show some vulnerability details if found
            vulnerabilities = result.get("vulnerabilities", [])
            if vulnerabilities:
                print(f"\n   📋 Final Vulnerability Summary:")
                for i, vuln in enumerate(vulnerabilities[:5], 1):  # Show first 5
                    template_id = vuln.get("template_id", "unknown")
                    severity = vuln.get("severity", "unknown")
                    matched_at = vuln.get("matched_at", "unknown")
                    print(f"      {i}. {template_id} [{severity}] - {matched_at}")

                if len(vulnerabilities) > 5:
                    print(f"      ... and {len(vulnerabilities) - 5} more")
            else:
                print(f"   ℹ️  No vulnerabilities detected")

            return True
        else:
            error = result.get("error", "Unknown error")
            print(f"\n   ❌ Streaming vulnerability scan failed: {error}")
            return False

    except Exception as e:
        print(f"\n   ❌ Exception during streaming vulnerability scan: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_vulnerability_scanner_direct():
    """Test the vulnerability scanner directly without MCP."""

    print("🚀 Testing Vulnerability Scanner (Direct)")
    print("=" * 45)
    print()

    # Test target
    target_host = "10.0.0.224"
    target_port = 80

    print(f"🎯 Target: {target_host}:{target_port}")
    print()

    # Test 1: Import the vulnerability scanner module
    print("1. Testing vulnerability scanner module import...")
    try:
        from red_team_mcp.nuclei_scanner import enumerate_vulnerabilities, enumerate_vulnerabilities_streaming
        print("   ✅ Vulnerability scanner module imported successfully")
    except ImportError as e:
        print(f"   ❌ Failed to import vulnerability scanner: {e}")
        return False

    # Test 2: Check if nuclei is available
    print("\n2. Checking nuclei availability...")
    try:
        import subprocess
        result = subprocess.run(["nuclei", "-version"],
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            version_info = result.stdout.strip()
            print(f"   ✅ Nuclei is available: {version_info}")
        else:
            print(f"   ❌ Nuclei command failed: {result.stderr}")
            print("   💡 Make sure nuclei is installed and in PATH")
            return False
    except subprocess.TimeoutExpired:
        print("   ❌ Nuclei command timed out")
        return False
    except FileNotFoundError:
        print("   ❌ Nuclei not found in PATH")
        print("   💡 Install nuclei: https://github.com/projectdiscovery/nuclei")
        return False
    except Exception as e:
        print(f"   ❌ Error checking nuclei: {e}")
        return False

    # Test 3: Test vulnerability enumeration
    print(f"\n3. Testing vulnerability enumeration on {target_host}:{target_port}...")
    try:
        print(f"   🔍 Starting vulnerability scan...")
        print(f"   📡 Target: {target_host}:{target_port}")
        print(f"   ⏱️  This may take a few minutes...")
        print()

        result = enumerate_vulnerabilities(target_host, target_port)

        if result.get("success"):
            scan_id = result.get("scan_id")
            vuln_count = result.get("vulnerabilities_found", 0)
            duration = result.get("duration_seconds", 0)

            print(f"   ✅ Vulnerability scan completed successfully!")
            print(f"   📊 Scan ID: {scan_id}")
            print(f"   🔍 Vulnerabilities found: {vuln_count}")
            print(f"   ⏱️  Duration: {duration:.2f} seconds")

            # Show some vulnerability details if found
            vulnerabilities = result.get("vulnerabilities", [])
            if vulnerabilities:
                print(f"\n   📋 Vulnerability Details:")
                for i, vuln in enumerate(vulnerabilities[:5], 1):  # Show first 5
                    template_id = vuln.get("template_id", "unknown")
                    severity = vuln.get("severity", "unknown")
                    matched_at = vuln.get("matched_at", "unknown")
                    print(f"      {i}. {template_id} [{severity}] - {matched_at}")

                if len(vulnerabilities) > 5:
                    print(f"      ... and {len(vulnerabilities) - 5} more")
            else:
                print(f"   ℹ️  No vulnerabilities detected")

            # Show debug info
            debug = result.get("debug", {})
            if debug:
                print(f"\n   🔧 Debug Info:")
                print(f"      Command: {debug.get('command', 'N/A')}")
                print(f"      Return code: {debug.get('return_code', 'N/A')}")
                print(f"      Output lines: {debug.get('output_lines_count', 0)}")
                print(f"      Parsing successful: {debug.get('parsing_successful', False)}")

            return True
        else:
            error = result.get("error", "Unknown error")
            print(f"   ❌ Vulnerability scan failed: {error}")

            # Show debug info for failed scans
            debug = result.get("debug")
            if debug:
                print(f"   🔧 Debug Info:")
                print(f"      Command: {debug.get('command', 'N/A')}")
                print(f"      Return code: {debug.get('return_code', 'N/A')}")
                stderr = debug.get('stderr')
                if stderr:
                    print(f"      Error output: {stderr}")

            return False

    except Exception as e:
        print(f"   ❌ Exception during vulnerability scan: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_vulnerability_scanner_fastmcp():
    """Test the vulnerability scanner through FastMCP interface."""

    print("\n🚀 Testing Vulnerability Scanner (FastMCP)")
    print("=" * 45)
    print()

    target_host = "10.0.0.224"
    target_port = 80

    print(f"🎯 Target: {target_host}:{target_port}")
    print()

    try:
        # Import FastMCP tools
        from red_team_mcp.fastmcp_server import enumerate_vulnerabilities
        from red_team_mcp.fastmcp_server import VulerabilityScanParameters

        print("1. Testing FastMCP vulnerability scanner...")

        # Create parameters
        params = VulerabilityScanParameters(host=target_host, port=target_port)

        print(f"   🔍 Calling enumerate_vulnerabilities via FastMCP...")
        print(f"   📡 Target: {target_host}:{target_port}")
        print(f"   ⏱️  This may take a few minutes...")
        print()

        # Call the FastMCP tool
        result_json = enumerate_vulnerabilities(params)
        result = json.loads(result_json)

        if result.get("success"):
            scan_id = result.get("scan_id")
            vuln_count = result.get("vulnerabilities_found", 0)
            duration = result.get("duration_seconds", 0)

            print(f"   ✅ FastMCP vulnerability scan completed!")
            print(f"   📊 Scan ID: {scan_id}")
            print(f"   🔍 Vulnerabilities found: {vuln_count}")
            print(f"   ⏱️  Duration: {duration:.2f} seconds")

            # Show some vulnerability details if found
            vulnerabilities = result.get("vulnerabilities", [])
            if vulnerabilities:
                print(f"\n   📋 Vulnerability Details:")
                for i, vuln in enumerate(vulnerabilities[:3], 1):  # Show first 3
                    template_id = vuln.get("template_id", "unknown")
                    severity = vuln.get("severity", "unknown")
                    matched_at = vuln.get("matched_at", "unknown")
                    print(f"      {i}. {template_id} [{severity}] - {matched_at}")

                if len(vulnerabilities) > 3:
                    print(f"      ... and {len(vulnerabilities) - 3} more")
            else:
                print(f"   ℹ️  No vulnerabilities detected")

            return True
        else:
            error = result.get("error", "Unknown error")
            print(f"   ❌ FastMCP vulnerability scan failed: {error}")
            return False

    except Exception as e:
        print(f"   ❌ Exception during FastMCP test: {e}")
        import traceback
        traceback.print_exc()
        return False


def demonstrate_vulnerability_scanning():
    """Demonstrate how vulnerability scanning works."""

    print("\n💡 Vulnerability Scanning Concept")
    print("=" * 35)
    print()
    print("How the vulnerability scanner works:")
    print()
    print("1. 🎯 Takes a target host and port")
    print("2. 🔧 Builds nuclei command with appropriate target format")
    print("3. 🚀 Executes nuclei with default templates")
    print("4. 📊 Parses nuclei output for vulnerabilities")
    print("5. 💾 Saves results to MongoDB database")
    print("6. 📋 Returns structured vulnerability data")
    print()
    print("Target formats:")
    print("  • Port 80: http://host")
    print("  • Port 443: https://host:443")
    print("  • Other ports: host:port")
    print()
    print("Database storage:")
    print("  • One entry per vulnerability found")
    print("  • Includes host, port, severity, template info")
    print("  • Searchable by host, port, or vulnerability type")


async def main():
    """Main test function."""

    print("🧪 Red Team MCP - Vulnerability Scanner Test")
    print("=" * 50)
    print()

    # Test streaming vulnerability scanner
    streaming_success = test_vulnerability_scanner_streaming()

    # Test direct vulnerability scanner
    direct_success = test_vulnerability_scanner_direct()

    # Test FastMCP interface
    fastmcp_success = await test_vulnerability_scanner_fastmcp()

    # Show concept
    demonstrate_vulnerability_scanning()

    # Summary
    print(f"\n📊 Test Results Summary")
    print("=" * 25)
    print(f"Streaming scanner test: {'✅ PASSED' if streaming_success else '❌ FAILED'}")
    print(f"Direct scanner test: {'✅ PASSED' if direct_success else '❌ FAILED'}")
    print(f"FastMCP scanner test: {'✅ PASSED' if fastmcp_success else '❌ FAILED'}")

    overall_success = streaming_success and direct_success and fastmcp_success

    if overall_success:
        print(f"\n🎉 All vulnerability scanner tests passed!")
        print(f"\n🎯 Next Steps:")
        print(f"  • Test with different targets and ports")
        print(f"  • Integrate with AI agents")
        print(f"  • Use search_findings to query results")
    else:
        print(f"\n⚠️  Some tests failed. Check the output above for details.")

    return 0 if overall_success else 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
